/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.enums.AppParametriaLabelEnum;
import com.incloud.hcp.common.enums.AppParametriaModuloEnum;
import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.common.graph.GraphBarChart;
import com.incloud.hcp.common.graph.GraphBean;
import com.incloud.hcp.common.graph.GraphDataset;
import com.incloud.hcp.common.graph.GraphPieChart;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.domain.response.CsOrdenServicioResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.*;
import com.incloud.hcp.service.CsOrdenServicioService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.delta.*;
import com.incloud.hcp.service.requireNew.CsOrdenServicioRequireNewService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.Constants;
import com.incloud.hcp.utils.DateUtils;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for CsOrdenServicio.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CsOrdenServicioServiceImpl extends JPACustomServiceImpl<CsOrdenServicioResponse, CsOrdenServicio, Long>
        implements CsOrdenServicioService {

    protected final String NAME_SHEET = "CsOrdenServicio";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CsOrdenServicioExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

    @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;

    @Autowired
    protected CsOrdenServicioDeltaRepository csOrdenServicioDeltaRepository;

    @Autowired
    protected CsOrdenServicioRequireNewService csOrdenServicioRequireNewService;

    @Autowired
    protected MtrModalidadTrabajoDeltaService mtrModalidadTrabajoDeltaService;

    @Autowired
    protected MtrModalidadTrabajoDeltaRepository mtrModalidadTrabajoDeltaRepository;

    @Autowired
    protected MtrTiempoEntregaDeltaService mtrTiempoEntregaDeltaService;

    @Autowired
    protected MtrTiempoEntregaDeltaRepository mtrTiempoEntregaDeltaRepository;

    @Autowired
    protected MtrCalidadServicioDeltaService mtrCalidadServicioDeltaService;

    @Autowired
    protected MtrCalidadServicioDeltaRepository mtrCalidadServicioDeltaRepository;

    @Autowired
    protected MtrEstadoDeltaService mtrEstadoDeltaService;

    @Autowired
    protected MtrEstadoDeltaRepository mtrEstadoDeltaRepository;

    @Autowired
    protected MtrLugarTrabajoDeltaService mtrLugarTrabajoDeltaService;

    @Autowired
    protected MtrLugarTrabajoDeltaRepository mtrLugarTrabajoDeltaRepository;

    @Autowired
    protected OdmDeltaService odmDeltaService;

    @Autowired
    protected OdmDeltaRepository odmDeltaRepository;

    @Autowired
    protected MtrPuertoDeltaService mtrPuertoDeltaService;

    @Autowired
    protected MtrPuertoDeltaRepository mtrPuertoDeltaRepository;

    @Autowired
    protected MtrSeguridadDeltaService mtrSeguridadDeltaService;

    @Autowired
    protected MtrSeguridadDeltaRepository mtrSeguridadDeltaRepository;

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(CsOrdenServicio_.numeroOrdenServicio.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.motivo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.txtAprobacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.horometro.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.horaInicioDuracionReal.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.horaFinDuracionReal.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.codigoSistema.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.descripcionSistema.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.codigoEmbarcacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.descripcionEmbarcacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.claseOdm.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.rucProveedor.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.razonSocialProveedor.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.lifnrProveedor.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.observacion.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.codigoEquipo.getName(), match -> match.ignoreCase().startsWith())
                .withMatcher(CsOrdenServicio_.descripcionEquipo.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(CsOrdenServicio req, ExampleMatcher matcher, Example<CsOrdenServicio> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<CsOrdenServicio> req, ExampleMatcher matcher, Example<CsOrdenServicio> example);

    protected final CsOrdenServicio setObtenerBeanResponse(CsOrdenServicioResponse bean) {
        return bean.getBean();
    }

    protected final Class<CsOrdenServicio> setObtenerClassBean() {
        return CsOrdenServicio.class;
    }

    protected List<Predicate> setAbstractPredicate(CsOrdenServicioResponse bean, CriteriaBuilder cb, Root<CsOrdenServicio> root) {
        List<Predicate> predicates = new ArrayList<>();
        CsOrdenServicio entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getNumeroOrdenServicioCondicion(), "numeroOrdenServicio", entity.getNumeroOrdenServicio(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaEmisionCondicion(), "fechaEmision", entity.getFechaEmision(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getMotivoCondicion(), "motivo", entity.getMotivo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getTxtAprobacionCondicion(), "txtAprobacion", entity.getTxtAprobacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getHorometroCondicion(), "horometro", entity.getHorometro(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getFechaInicioDuracionRealCondicion(), "fechaInicioDuracionReal", entity.getFechaInicioDuracionReal(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getHoraInicioDuracionRealCondicion(), "horaInicioDuracionReal", entity.getHoraInicioDuracionReal(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getFechaFinDuracionRealCondicion(), "fechaFinDuracionReal", entity.getFechaFinDuracionReal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getHoraFinDuracionRealCondicion(), "horaFinDuracionReal", entity.getHoraFinDuracionReal(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoSistemaCondicion(), "codigoSistema", entity.getCodigoSistema(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionSistemaCondicion(), "descripcionSistema", entity.getDescripcionSistema(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoEmbarcacionCondicion(), "codigoEmbarcacion", entity.getCodigoEmbarcacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionEmbarcacionCondicion(), "descripcionEmbarcacion", entity.getDescripcionEmbarcacion(), cb,
                root);
        PredicateUtils.addPredicates(predicates, bean.getClaseOdmCondicion(), "claseOdm", entity.getClaseOdm(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getRucProveedorCondicion(), "rucProveedor", entity.getRucProveedor(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getRazonSocialProveedorCondicion(), "razonSocialProveedor", entity.getRazonSocialProveedor(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getLifnrProveedorCondicion(), "lifnrProveedor", entity.getLifnrProveedor(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getObservacionCondicion(), "observacion", entity.getObservacion(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getCodigoEquipoCondicion(), "codigoEquipo", entity.getCodigoEquipo(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescripcionEquipoCondicion(), "descripcionEquipo", entity.getDescripcionEquipo(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrModalidadTrabajoCondicion(), "mtrModalidadTrabajo", entity.getMtrModalidadTrabajo(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrTiempoEntregaCondicion(), "mtrTiempoEntrega", entity.getMtrTiempoEntrega(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrCalidadServicioCondicion(), "mtrCalidadServicio", entity.getMtrCalidadServicio(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrEstadoCondicion(), "mtrEstado", entity.getMtrEstado(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrLugarTrabajoCondicion(), "mtrLugarTrabajo", entity.getMtrLugarTrabajo(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getOdmCondicion(), "odm", entity.getOdm(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrPuertoCondicion(), "mtrPuerto", entity.getMtrPuerto(), cb, root);
        //PredicateUtils.addPredicates(predicates, bean.getMtrSeguridadCondicion(), "mtrSeguridad", entity.getMtrSeguridad(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "numeroOrdenServicio", bean.getNumeroOrdenServicioList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaEmision", bean.getFechaEmisionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "motivo", bean.getMotivoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "txtAprobacion", bean.getTxtAprobacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "horometro", bean.getHorometroList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaInicioDuracionReal", bean.getFechaInicioDuracionRealList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "horaInicioDuracionReal", bean.getHoraInicioDuracionRealList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "fechaFinDuracionReal", bean.getFechaFinDuracionRealList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "horaFinDuracionReal", bean.getHoraFinDuracionRealList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoSistema", bean.getCodigoSistemaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcionSistema", bean.getDescripcionSistemaList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoEmbarcacion", bean.getCodigoEmbarcacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcionEmbarcacion", bean.getDescripcionEmbarcacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "claseOdm", bean.getClaseOdmList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "rucProveedor", bean.getRucProveedorList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "razonSocialProveedor", bean.getRazonSocialProveedorList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "lifnrProveedor", bean.getLifnrProveedorList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "observacion", bean.getObservacionList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "codigoEquipo", bean.getCodigoEquipoList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "descripcionEquipo", bean.getDescripcionEquipoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrModalidadTrabajo", bean.getMtrModalidadTrabajoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrTiempoEntrega", bean.getMtrTiempoEntregaList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrCalidadServicio", bean.getMtrCalidadServicioList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrEstado", bean.getMtrEstadoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrLugarTrabajo", bean.getMtrLugarTrabajoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "odm", bean.getOdmList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrPuerto", bean.getMtrPuertoList(), cb, root);
        //PredicateUtils.addPredicatesListValorBean(predicates, "mtrSeguridad", bean.getMtrSeguridadList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(CsOrdenServicio bean) throws Exception {
        String mensaje = "";
        if (!Optional.of(bean.getNumeroOrdenServicio()).isPresent()) {
            String msg = this.messageSource.getMessage("message.csOrdenServicio.numeroOrdenServicio.requerido", null, LocaleContextHolder.getLocale());
            mensaje += "* " + msg + "<br/>";
        }
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(CsOrdenServicio bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(CsOrdenServicio bean) throws Exception {
        String msg = null;
        CsOrdenServicio validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(CsOrdenServicio bean) throws Exception {
        String msg = null;
        CsOrdenServicio validar = null;
        return msg;
    }

    protected CsOrdenServicio completarDatosBean(CsOrdenServicio bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CsOrdenServicio setCompletarDatosBean(CsOrdenServicio bean) throws Exception {
        return bean;
    }

    protected final CsOrdenServicio setAbstractCreate(CsOrdenServicio dto) throws Exception {
        CsOrdenServicio bean = new CsOrdenServicio();
        bean = (CsOrdenServicio) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CsOrdenServicio setUploadExcel(Cell currentCell, CsOrdenServicio csOrdenServicio, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo numeroOrdenServicio contiene mas de 50 caracter(es)");
                }
                csOrdenServicio.setNumeroOrdenServicio(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo numeroOrdenServicio está en formato incorrecto");
            }
            break;
        case 2:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                csOrdenServicio.setFechaEmision(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaEmision está en formato incorrecto");
            }
            break;
        case 3:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 100) {
                    throw new ServiceException("Valor Campo motivo contiene mas de 100 caracter(es)");
                }
                csOrdenServicio.setMotivo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo motivo está en formato incorrecto");
            }
            break;
        case 4:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo txtAprobacion contiene mas de 255 caracter(es)");
                }
                csOrdenServicio.setTxtAprobacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo txtAprobacion está en formato incorrecto");
            }
            break;
        case 5:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo horometro contiene mas de 20 caracter(es)");
                }
                csOrdenServicio.setHorometro(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo horometro está en formato incorrecto");
            }
            break;
        case 6:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                csOrdenServicio.setFechaInicioDuracionReal(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaInicioDuracionReal está en formato incorrecto");
            }
            break;
        case 7:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo horaInicioDuracionReal contiene mas de 20 caracter(es)");
                }
                csOrdenServicio.setHoraInicioDuracionReal(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo horaInicioDuracionReal está en formato incorrecto");
            }
            break;
        case 8:
            try {
                valorCadena = currentCell.getStringCellValue();
                Date valorFechaD = DateUtils.convertStringToDate("dd/MM/yyyy", valorCadena);
                csOrdenServicio.setFechaFinDuracionReal(valorFechaD);
            } catch (Exception ex) {
                throw new ServiceException("Valor Campo fechaFinDuracionReal está en formato incorrecto");
            }
            break;
        case 9:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo horaFinDuracionReal contiene mas de 20 caracter(es)");
                }
                csOrdenServicio.setHoraFinDuracionReal(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo horaFinDuracionReal está en formato incorrecto");
            }
            break;
        case 10:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo codigoSistema contiene mas de 50 caracter(es)");
                }
                csOrdenServicio.setCodigoSistema(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoSistema está en formato incorrecto");
            }
            break;
        case 11:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo descripcionSistema contiene mas de 255 caracter(es)");
                }
                csOrdenServicio.setDescripcionSistema(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcionSistema está en formato incorrecto");
            }
            break;
        case 12:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo codigoEmbarcacion contiene mas de 50 caracter(es)");
                }
                csOrdenServicio.setCodigoEmbarcacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoEmbarcacion está en formato incorrecto");
            }
            break;
        case 13:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo descripcionEmbarcacion contiene mas de 255 caracter(es)");
                }
                csOrdenServicio.setDescripcionEmbarcacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcionEmbarcacion está en formato incorrecto");
            }
            break;
        case 14:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 200) {
                    throw new ServiceException("Valor Campo claseOdm contiene mas de 200 caracter(es)");
                }
                csOrdenServicio.setClaseOdm(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo claseOdm está en formato incorrecto");
            }
            break;
        case 15:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo rucProveedor contiene mas de 20 caracter(es)");
                }
                csOrdenServicio.setRucProveedor(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo rucProveedor está en formato incorrecto");
            }
            break;
        case 16:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 200) {
                    throw new ServiceException("Valor Campo razonSocialProveedor contiene mas de 200 caracter(es)");
                }
                csOrdenServicio.setRazonSocialProveedor(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo razonSocialProveedor está en formato incorrecto");
            }
            break;
        case 17:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 20) {
                    throw new ServiceException("Valor Campo lifnrProveedor contiene mas de 20 caracter(es)");
                }
                csOrdenServicio.setLifnrProveedor(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo lifnrProveedor está en formato incorrecto");
            }
            break;
        case 18:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo observacion contiene mas de 255 caracter(es)");
                }
                csOrdenServicio.setObservacion(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo observacion está en formato incorrecto");
            }
            break;
        case 19:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 50) {
                    throw new ServiceException("Valor Campo codigoEquipo contiene mas de 50 caracter(es)");
                }
                csOrdenServicio.setCodigoEquipo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo codigoEquipo está en formato incorrecto");
            }
            break;
        case 20:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 255) {
                    throw new ServiceException("Valor Campo descripcionEquipo contiene mas de 255 caracter(es)");
                }
                csOrdenServicio.setDescripcionEquipo(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo descripcionEquipo está en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return csOrdenServicio;
    }

    protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }

    protected CsOrdenServicio setInicializarBeanUpdateExcel() {
        CsOrdenServicio bean = new CsOrdenServicio();
        bean.setId(null);
        return bean;
    }

    protected final Long setObtenerId(CsOrdenServicio bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final CsOrdenServicio createInstance() {
        CsOrdenServicio csOrdenServicio = new CsOrdenServicio();
        return csOrdenServicio;
    }

    protected final BeanCargaMasivoDTO<CsOrdenServicio> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<CsOrdenServicio> beanCargaMasivoDTO = new BeanCargaMasivoDTO<CsOrdenServicio>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<CsOrdenServicio>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<CsOrdenServicio>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<CsOrdenServicio>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(CsOrdenServicio bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroOrdenServicio(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEmision(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getMotivo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getTxtAprobacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getHorometro(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicioDuracionReal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getHoraInicioDuracionReal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinDuracionReal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getHoraFinDuracionReal(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoSistema(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionSistema(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoEmbarcacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEmbarcacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getClaseOdm(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getRucProveedor(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getRazonSocialProveedor(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getLifnrProveedor(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoEquipo(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEquipo(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(CsOrdenServicio bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getNumeroOrdenServicio(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaEmision(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getMotivo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getTxtAprobacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getHorometro(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaInicioDuracionReal(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getHoraInicioDuracionReal(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getFechaFinDuracionReal(), dataRow.createCell(contador), "DT", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getHoraFinDuracionReal(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoSistema(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionSistema(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoEmbarcacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEmbarcacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getClaseOdm(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getRucProveedor(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getRazonSocialProveedor(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getLifnrProveedor(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getObservacion(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getCodigoEquipo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDescripcionEquipo(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(CsOrdenServicio bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO CS_ORDEN_SERVICIO(";
        sqlInsert = sqlInsert + "CS_ORDEN_SERVICIO_ID" + ", ";
        sqlInsert = sqlInsert + "NUMERO_ORDEN_SERVICIO" + ", ";
        sqlInsert = sqlInsert + "FECHA_EMISION" + ", ";
        sqlInsert = sqlInsert + "MOTIVO" + ", ";
        sqlInsert = sqlInsert + "TXT_APROBACION" + ", ";
        sqlInsert = sqlInsert + "HOROMETRO" + ", ";
        sqlInsert = sqlInsert + "FECHA_INICIO_DURACION_REAL" + ", ";
        sqlInsert = sqlInsert + "HORA_INICIO_DURACION_REAL" + ", ";
        sqlInsert = sqlInsert + "FECHA_FIN_DURACION_REAL" + ", ";
        sqlInsert = sqlInsert + "HORA_FIN_DURACION_REAL" + ", ";
        sqlInsert = sqlInsert + "CODIGO_SISTEMA" + ", ";
        sqlInsert = sqlInsert + "DESCRIPCION_SISTEMA" + ", ";
        sqlInsert = sqlInsert + "CODIGO_EMBARCACION" + ", ";
        sqlInsert = sqlInsert + "DESCRIPCION_EMBARCACION" + ", ";
        sqlInsert = sqlInsert + "CLASE_ODM" + ", ";
        sqlInsert = sqlInsert + "RUC_PROVEEDOR" + ", ";
        sqlInsert = sqlInsert + "RAZON_SOCIAL_PROVEEDOR" + ", ";
        sqlInsert = sqlInsert + "LIFNR_PROVEEDOR" + ", ";
        sqlInsert = sqlInsert + "OBSERVACION" + ", ";
        sqlInsert = sqlInsert + "CODIGO_EQUIPO" + ", ";
        sqlInsert = sqlInsert + "DESCRIPCION_EQUIPO" + ", ";
        sqlInsert = sqlInsert + "MTR_ESTADO_ID" + ", ";
        sqlInsert = sqlInsert + "ODM_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_PUERTO_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_MODALIDAD_TRABAJO_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_LUGAR_TRABAJO_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_CALIDAD_SERVICIO_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_TIEMPO_ENTREGA_ID" + ", ";
        sqlInsert = sqlInsert + "MTR_SEGURIDAD_ID" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getNumeroOrdenServicio())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getNumeroOrdenServicio() + "'" + ", ";
        }
        if (bean.getFechaEmision() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaEmision());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getMotivo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getMotivo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getTxtAprobacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getTxtAprobacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getHorometro())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getHorometro() + "'" + ", ";
        }
        if (bean.getFechaInicioDuracionReal() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaInicioDuracionReal());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getHoraInicioDuracionReal())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getHoraInicioDuracionReal() + "'" + ", ";
        }
        if (bean.getFechaFinDuracionReal() != null) {
            fechaS = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", bean.getFechaFinDuracionReal());
            sqlInsert = sqlInsert + "to_date('" + fechaS + "','dd/MM/yyyy HH:mm:ss')" + ", ";
        } else {
            sqlInsert = sqlInsert + "null" + ", ";
        }
        if (StringUtils.isBlank(bean.getHoraFinDuracionReal())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getHoraFinDuracionReal() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCodigoSistema())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoSistema() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcionSistema())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcionSistema() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCodigoEmbarcacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoEmbarcacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcionEmbarcacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcionEmbarcacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getClaseOdm())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getClaseOdm() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getRucProveedor())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getRucProveedor() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getRazonSocialProveedor())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getRazonSocialProveedor() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getLifnrProveedor())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getLifnrProveedor() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getObservacion())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getObservacion() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getCodigoEquipo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getCodigoEquipo() + "'" + ", ";
        }
        if (StringUtils.isBlank(bean.getDescripcionEquipo())) {
            sqlInsert = sqlInsert + "null" + ", ";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDescripcionEquipo() + "'" + ", ";
        }
        sqlInsert = sqlInsert + bean.getMtrModalidadTrabajo().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrTiempoEntrega().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrCalidadServicio().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrEstado().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrLugarTrabajo().getId() + ", ";
        sqlInsert = sqlInsert + bean.getOdm().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrPuerto().getId() + ", ";
        sqlInsert = sqlInsert + bean.getMtrSeguridad().getId();
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    public Long countByMtrModalidadTrabajo(MtrModalidadTrabajo mtrModalidadTrabajo) {
        return this.csOrdenServicioDeltaRepository.countByMtrModalidadTrabajo(mtrModalidadTrabajo);
    }

    public GraphBean graphByMtrModalidadTrabajo() {
        List<MtrModalidadTrabajo> lista = this.mtrModalidadTrabajoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrModalidadTrabajo bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrModalidadTrabajo(bean);
            String descripcion = this.setGraphDescripcionByMtrModalidadTrabajo(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrModalidadTrabajo();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrModalidadTrabajo();
        contador = 0;
        contadorColor = 0;
        for (MtrModalidadTrabajo bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrModalidadTrabajo(bean);
            String descripcion = this.setGraphDescripcionByMtrModalidadTrabajo(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrModalidadTrabajo(MtrModalidadTrabajo mtrModalidadTrabajo) {
        return mtrModalidadTrabajo.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrModalidadTrabajo() {
        return "MtrModalidadTrabajo";
    }

    protected String setGraphBarChartTituloByMtrModalidadTrabajo() {
        return "MtrModalidadTrabajo";
    }

    public Long countByMtrTiempoEntrega(MtrTiempoEntrega mtrTiempoEntrega) {
        return this.csOrdenServicioDeltaRepository.countByMtrTiempoEntrega(mtrTiempoEntrega);
    }

    public GraphBean graphByMtrTiempoEntrega() {
        List<MtrTiempoEntrega> lista = this.mtrTiempoEntregaDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrTiempoEntrega bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrTiempoEntrega(bean);
            String descripcion = this.setGraphDescripcionByMtrTiempoEntrega(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrTiempoEntrega();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrTiempoEntrega();
        contador = 0;
        contadorColor = 0;
        for (MtrTiempoEntrega bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrTiempoEntrega(bean);
            String descripcion = this.setGraphDescripcionByMtrTiempoEntrega(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrTiempoEntrega(MtrTiempoEntrega mtrTiempoEntrega) {
        return mtrTiempoEntrega.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTiempoEntrega() {
        return "MtrTiempoEntrega";
    }

    protected String setGraphBarChartTituloByMtrTiempoEntrega() {
        return "MtrTiempoEntrega";
    }

    public Long countByMtrCalidadServicio(MtrCalidadServicio mtrCalidadServicio) {
        return this.csOrdenServicioDeltaRepository.countByMtrCalidadServicio(mtrCalidadServicio);
    }

    public GraphBean graphByMtrCalidadServicio() {
        List<MtrCalidadServicio> lista = this.mtrCalidadServicioDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrCalidadServicio bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrCalidadServicio(bean);
            String descripcion = this.setGraphDescripcionByMtrCalidadServicio(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrCalidadServicio();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrCalidadServicio();
        contador = 0;
        contadorColor = 0;
        for (MtrCalidadServicio bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrCalidadServicio(bean);
            String descripcion = this.setGraphDescripcionByMtrCalidadServicio(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrCalidadServicio(MtrCalidadServicio mtrCalidadServicio) {
        return mtrCalidadServicio.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrCalidadServicio() {
        return "MtrCalidadServicio";
    }

    protected String setGraphBarChartTituloByMtrCalidadServicio() {
        return "MtrCalidadServicio";
    }

    public Long countByMtrEstado(MtrEstado mtrEstado) {
        return this.csOrdenServicioDeltaRepository.countByMtrEstado(mtrEstado);
    }

    public GraphBean graphByMtrEstado() {
        List<MtrEstado> lista = this.mtrEstadoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrEstado();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrEstado();
        contador = 0;
        contadorColor = 0;
        for (MtrEstado bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrEstado(bean);
            String descripcion = this.setGraphDescripcionByMtrEstado(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrEstado(MtrEstado mtrEstado) {
        return mtrEstado.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    protected String setGraphBarChartTituloByMtrEstado() {
        return "MtrEstado";
    }

    public Long countByMtrLugarTrabajo(MtrLugarTrabajo mtrLugarTrabajo) {
        return this.csOrdenServicioDeltaRepository.countByMtrLugarTrabajo(mtrLugarTrabajo);
    }

    public GraphBean graphByMtrLugarTrabajo() {
        List<MtrLugarTrabajo> lista = this.mtrLugarTrabajoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrLugarTrabajo bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrLugarTrabajo(bean);
            String descripcion = this.setGraphDescripcionByMtrLugarTrabajo(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrLugarTrabajo();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrLugarTrabajo();
        contador = 0;
        contadorColor = 0;
        for (MtrLugarTrabajo bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrLugarTrabajo(bean);
            String descripcion = this.setGraphDescripcionByMtrLugarTrabajo(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrLugarTrabajo(MtrLugarTrabajo mtrLugarTrabajo) {
        return mtrLugarTrabajo.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrLugarTrabajo() {
        return "MtrLugarTrabajo";
    }

    protected String setGraphBarChartTituloByMtrLugarTrabajo() {
        return "MtrLugarTrabajo";
    }

    public Long countByOdm(Odm odm) {
        return this.csOrdenServicioDeltaRepository.countByOdm(odm);
    }

    public GraphBean graphByOdm() {
        List<Odm> lista = this.odmDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (Odm bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByOdm(bean);
            String descripcion = this.setGraphDescripcionByOdm(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByOdm();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByOdm();
        contador = 0;
        contadorColor = 0;
        for (Odm bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByOdm(bean);
            String descripcion = this.setGraphDescripcionByOdm(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByOdm(Odm odm) {
        return odm.getId().toString();
    }

    protected String setGraphPieChartTituloByOdm() {
        return "Odm";
    }

    protected String setGraphBarChartTituloByOdm() {
        return "Odm";
    }

    public Long countByMtrPuerto(MtrPuerto mtrPuerto) {
        return this.csOrdenServicioDeltaRepository.countByMtrPuerto(mtrPuerto);
    }

    public GraphBean graphByMtrPuerto() {
        List<MtrPuerto> lista = this.mtrPuertoDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrPuerto bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrPuerto(bean);
            String descripcion = this.setGraphDescripcionByMtrPuerto(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrPuerto();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrPuerto();
        contador = 0;
        contadorColor = 0;
        for (MtrPuerto bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrPuerto(bean);
            String descripcion = this.setGraphDescripcionByMtrPuerto(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrPuerto(MtrPuerto mtrPuerto) {
        return mtrPuerto.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrPuerto() {
        return "MtrPuerto";
    }

    protected String setGraphBarChartTituloByMtrPuerto() {
        return "MtrPuerto";
    }

    public Long countByMtrSeguridad(MtrSeguridad mtrSeguridad) {
        return this.csOrdenServicioDeltaRepository.countByMtrSeguridad(mtrSeguridad);
    }

    public GraphBean graphByMtrSeguridad() {
        List<MtrSeguridad> lista = this.mtrSeguridadDeltaRepository.findAll();
        if (lista == null || lista.size() <= 0) {
            return null;
        }
        GraphBean graphBean = new GraphBean();

        /* Obteniendo Pie Chart */
        GraphPieChart graphPieChart = new GraphPieChart();
        GraphDataset graphDataset = new GraphDataset();
        GraphDataset[] listaGraphDataset = new GraphDataset[1];
        Long[] data = new Long[lista.size()];
        String[] labels = new String[lista.size()];
        String[] backgroundColor = new String[lista.size()];
        String[] hoverBackgroundColor = new String[lista.size()];
        String[] borderColor = new String[lista.size()];
        String[] hoverBorderColor = new String[lista.size()];
        int contador = 0;
        int contadorColor = 0;
        for (MtrSeguridad bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrSeguridad(bean);
            String descripcion = this.setGraphDescripcionByMtrSeguridad(bean);
            data[contador] = valor;
            labels[contador] = descripcion;
            backgroundColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColor[contador] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColor[contador] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }
        }
        String titulo = this.setGraphPieChartTituloByMtrSeguridad();
        graphDataset.setLabel(titulo);
        graphDataset.setData(data);
        graphDataset.setBackgroundColor(backgroundColor);
        graphDataset.setHoverBackgroundColor(hoverBackgroundColor);
        listaGraphDataset[0] = graphDataset;
        graphPieChart.setDatasets(listaGraphDataset);
        graphPieChart.setLabels(labels);
        graphBean.setPiechart(graphPieChart);

        GraphBarChart graphBarChart = new GraphBarChart();
        GraphDataset[] listaGraphDatasetBar = new GraphDataset[lista.size()];
        String[] labelsBar = new String[1];
        labelsBar[0] = this.setGraphBarChartTituloByMtrSeguridad();
        contador = 0;
        contadorColor = 0;
        for (MtrSeguridad bean : lista) {
            Long valor = this.csOrdenServicioDeltaRepository.countByMtrSeguridad(bean);
            String descripcion = this.setGraphDescripcionByMtrSeguridad(bean);
            GraphDataset graphDatasetBar = new GraphDataset();
            Long[] dataBar = new Long[1];

            String[] backgroundColorBar = new String[1];
            String[] hoverBackgroundColorBar = new String[1];
            String[] borderColorBar = new String[1];
            String[] hoverBorderColorBar = new String[1];

            dataBar[0] = valor;
            backgroundColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBackgroundColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];
            borderColorBar[0] = Constants.BACKGROUND_COLOR_GRAPH[contadorColor];
            hoverBorderColorBar[0] = Constants.HOVER_BACKGROUND_COLOR_GRAPH[contadorColor];

            graphDatasetBar.setLabel(descripcion);
            graphDatasetBar.setData(dataBar);
            graphDatasetBar.setBackgroundColor(backgroundColorBar);
            graphDatasetBar.setHoverBackgroundColor(hoverBackgroundColorBar);
            graphDatasetBar.setBorderColor(borderColorBar);
            graphDatasetBar.setHoverBorderColor(hoverBorderColorBar);
            listaGraphDatasetBar[contador] = graphDatasetBar;

            contador++;
            contadorColor++;
            if (contadorColor >= REGISTROS_COLOR) {
                contadorColor = 1;
            }

        }
        graphBarChart.setDatasets(listaGraphDatasetBar);
        graphBarChart.setLabels(labelsBar);
        graphBean.setBarchart(graphBarChart);
        return graphBean;
    }

    protected String setGraphDescripcionByMtrSeguridad(MtrSeguridad mtrSeguridad) {
        return mtrSeguridad.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrSeguridad() {
        return "MtrSeguridad";
    }

    protected String setGraphBarChartTituloByMtrSeguridad() {
        return "MtrSeguridad";
    }

}
