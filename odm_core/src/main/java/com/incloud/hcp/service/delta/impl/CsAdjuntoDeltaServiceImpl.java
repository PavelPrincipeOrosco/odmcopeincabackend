/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.domain.CsAdjunto;
import com.incloud.hcp.domain.CsOrdenServicio;
import com.incloud.hcp.domain.MtrTipoDocumento;
import com.incloud.hcp.domain.response.CsAdjuntoResponse;
import com.incloud.hcp.service.delta.CsAdjuntoDeltaService;
import com.incloud.hcp.service.impl.CsAdjuntoServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.List;

/**
 * A simple DTO Facility for CsAdjunto.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class CsAdjuntoDeltaServiceImpl extends CsAdjuntoServiceImpl implements CsAdjuntoDeltaService {

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    /***********************/
    /* Metodos de Busqueda */
    /***********************/

    protected Sort setFindAll(Sort sort) {
        return sort;
    }

    protected Sort setFind(CsAdjunto req, ExampleMatcher matcher, Example<CsAdjunto> example, Sort sort) {
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<CsAdjunto> req, ExampleMatcher matcher, Example<CsAdjunto> example) {
        return;
    }

    protected List<Predicate> setAdicionalDeltaPredicate(List<Predicate> predicates, CsAdjuntoResponse bean, CriteriaBuilder cb, CriteriaQuery<CsAdjunto> query,
            Root<CsAdjunto> root) throws Exception {

        CsAdjunto entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            Join<CsAdjunto, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
        
            if (Optional.ofNullable(entity.get<VariableManytoOne>().get<Atributo>()).isPresent()) {
                Join<CsAdjunto, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
                Predicate thirdCondition = cb.equal(from<ClaseManytoOne>.get("<Atributo>"), entity.get<ClaseManytoOne>().get<Atributo>());
                predicates.add(thirdCondition);
            }
            
        }
        query.orderBy(cb.desc(root.get("<campo entity>")));
        */
        return predicates;
    }

    protected Root<CsAdjunto> setAdicionalDeltaTotalPredicate(CsAdjuntoResponse bean, Root<CsAdjunto> countRoot) throws Exception {
        CsAdjunto entity = bean.getBean();
        //Ejemplo
        /*
        if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
            if (Optional.ofNullable(entity.get<VariableManytoOne>()).isPresent()) {
                Join<CsAdjunto, <ClaseManytoOne>> from<ClaseManytoOne> = countRoot.join("<variableManytoOne>", JoinType.INNER);
            }
        }
        */
        return countRoot;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected String setValidacionesPrevias(CsAdjunto bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected CsAdjunto setCreate(CsAdjunto bean) throws Exception {
        return bean;
    }

    protected void setSave(CsAdjunto dto) throws Exception {
        return;
    }

    protected void setDelete(Long id) throws Exception {

    }

    protected void setDeleteAll() throws Exception {

    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected CsAdjunto setUploadExcel(Cell currentCell, CsAdjunto csAdjunto, int contador) throws Exception {
        csAdjunto = super.setUploadExcel(currentCell, csAdjunto, contador);
        return csAdjunto;
    }

    protected String setSaveMasivo(CsAdjunto dto) throws Exception {
        return "";
    }

    protected List<CsAdjunto> setBeforeDeleteMasivo(List<CsAdjunto> listaDto) throws Exception {
        return listaDto;
    }

    protected void setAfterDeleteMasivo() throws Exception {
        return;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected void setDownloadExcelItem(CsAdjunto bean, HSSFRow dataRow) {

    }

    protected void setDownloadExcel(HSSFSheet sheet) {

    }

    /*****************/
    /* Otros Metodos */
    /*****************/

    protected String setGraphDescripcionByMtrTipoDocumento(MtrTipoDocumento mtrTipoDocumento) {
        return mtrTipoDocumento.getId().toString();
    }

    protected String setGraphPieChartTituloByMtrTipoDocumento() {
        return "MtrTipoDocumento";
    }

    protected String setGraphBarChartTituloByMtrTipoDocumento() {
        return "MtrTipoDocumento";
    }

    protected String setGraphDescripcionByCsOrdenServicio(CsOrdenServicio csOrdenServicio) {
        return csOrdenServicio.getId().toString();
    }

    protected String setGraphPieChartTituloByCsOrdenServicio() {
        return "CsOrdenServicio";
    }

    protected String setGraphBarChartTituloByCsOrdenServicio() {
        return "CsOrdenServicio";
    }

}
